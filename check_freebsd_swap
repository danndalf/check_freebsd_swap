#!/usr/bin/perl -w
use strict;

=head1 NAME

check_freebsd_swap - Nagios plugin to report on FreeBSD aggregate swap file usage

=cut

# The POD text continues at the end of the file.

use strict;

use Data::Dumper;   ### For generating debug output in verbose mode
use Nagios::Plugin; ### For communicating with the nagios server


### Know what we're working with
my %measurements = (
	'total_swap_blocks' => {
		unit_of_measurement => 'kB',
		parser => sub { return $_[0]; },
	},
	'used_swap_blocks' => {
		unit_of_measurement => 'kB',
		parser => sub { return $_[1]; },
	},
	'available_swap_blocks' => {
		unit_of_measurement => 'kB',
		parser => sub { return $_[2]; },
	},
	'swap_usage' => {
		unit_of_measurement => '%',
		parser => sub { return $_[3]; },
	},
);
my $available_measurements = join(', ', sort(keys(%measurements)));


### Initialize the plugin
my $plugin = Nagios::Plugin->new( 
	shortname => "FREEBSD",
    usage => "Usage: check_freebsd_swap [-m measurement] "
    	    ."-w <warning_threshold> -c <critical_threshold> [--help] "
			."[-p protocol] [-v] -[t timeout]",
	version => '0.1.0',
	url     => 'http://dann.stayskal.com/software/check_freebsd',
	license => 'This nagios plugin is free software, and comes with '
			  ."ABSOLUTELY NO WARRANTY.\nIt may be used, redistributed "
			  ."and/or modified under the terms of the \nGNU General "
			  .'Public Licence. See LICENSE.txt for more information.',
	plugin  => 'check_freebsd_memory',
	extra	=> "\nAvailable measurements: $available_measurements\n",
);


### Add arguments for secure mode, username, and password
$plugin->add_arg(
	spec => 'warning|w=s',
	help => "-w, --warning=INTEGER\n   Threshold at which this measurement "
		   .'should generate a WARNING condiiton'
);
$plugin->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical=INTEGER\n   Threshold at which this measurement "
		   .'should generate a CRITICAL condiiton'
);
$plugin->add_arg(
	spec => 'measurement|m=s',
	help => "-m --measurement=STRING\n   Determines which measurement to extract.",
	required => 1,
);


### Parse command line options
$plugin->getopts;
$plugin->set_thresholds(
	warning => $plugin->opts->warning,
	critical => $plugin->opts->critical,
);
print 'Dump of $plugin: ' . Dumper($plugin) if $plugin->opts()->verbose >= 3;


### Make sure the measurement they gave is a valid one
unless($measurements{$plugin->opts->measurement}) {
	my $status_message = 'Invalid measurement: '.$plugin->opts->measurement;
	print "$status_message\nAvailable measurements: $available_measurements\n"
		if $plugin->opts->verbose >= 1;
	$plugin->nagios_exit( UNKNOWN, $status_message);
}


### Set timeout clock
alarm($plugin->opts()->timeout);
local $SIG{ALRM} = sub { 
	$plugin->nagios_exit( UNKNOWN, "Host timed out" );
};


### Make sure we can get to pstat(8)
unless( -e '/usr/sbin/pstat'){
	$plugin->nagios_exit( UNKNOWN, "No pstat in /usr/sbin/");
}
unless( -f '/usr/sbin/pstat'){
	my $error_message = 'Pstat at /usr/sbin/pstat not a plain file.';
	print "$error_message\nMake sure pstat isn't a directory, symbolic link, named pipe, or block file\n"
		if $plugin->opts->verbose >=1;
	$plugin->nagios_exit( UNKNOWN, $error_message);
}
unless( -x '/usr/sbin/pstat'){
	$plugin->nagios_exit( UNKNOWN, '/usr/sbin/pstat is not executable');
}


### Pull and parse pstat(8)
my $pstat = `/usr/sbin/pstat -s`||
	$plugin->nagios_exit( UNKNOWN, "/usr/sbin/pstat -s returned status $?");
print "pstat response:\n$pstat\n\n" if $plugin->opts->verbose >= 3;


### Stop here unless pstat(8) gave us something
unless($pstat){
	my $response = "No usable data in pstat(8) response";
	print "$response:\n$pstat\n\n" 
		if $plugin->opts->verbose >= 2;
	$plugin->nagios_exit(UNKNOWN, $response);
}


### Parse counts
my @counts = (0,0,0,0);
foreach my $line (split /\n/,$pstat){
	chomp $line;
	if($line =~ /(\d*)\s*(\d*)\s*(\d*)\s*(\d*)\%$/){
		$counts[0] += $1;
		$counts[1] += $2;
		$counts[2] += $3;
		$counts[3] += $4;
	}
}
my $value = $measurements{$plugin->opts->measurement}->{parser}->(@counts);
my $status_message = $value . $measurements{$plugin->opts->measurement}->{unit_of_measurement} 
					 . ' ' . $plugin->opts->measurement;


### Prepare Performance Data
$plugin->add_perfdata(
	label => $plugin->opts->measurement,
	value => $value,
	uom => $measurements{$plugin->opts->measurement}->{unit_of_measurement},
	threshold => $plugin->threshold
);


### Return the status message
my $status_code = $plugin->check_threshold($value);
$plugin->nagios_exit( $status_code, $status_message ) 
	if $status_code != OK;
$plugin->nagios_exit( UNKNOWN, $status_message )
	if $status_code == OK && !($plugin->opts->warning && $plugin->opts->critical);
$plugin->nagios_exit( OK, $status_message );


=head1 DESCRIPTION

This script acts as a plugin module for the Nagios IT infrastructure monitoring 
system. It on a FreeBSD server to poll for swap file information through pstat(8).
This plugin reports on the following 4 swap file measurements:

=over 4

=item * available_swap_blocks

=item * swap_usage

=item * total_swap_blocks

=item * used_swap_blocks

=back

This has been tested with FreeBSD 7.1. 

=head1 SYNOPSIS

=head2 Command Line Interface

Get the percentage of swap blocks that are currently in use:

	check_freebsd_swap -m swap_usage -w 80 -c 90

Get the aggregate number of swap blocks (1k) in use:

	check_freebsd_swap -m used_swap_blocks 

Run this script with command line options stored in a configuration file:

	check_freebsd_memory --extra-opts=my_config.ini

=head1 SEE ALSO

If using an external configuration file, it should be structured according to 
the specification at <http://nagiosplugins.org/extra-opts/>.

Thresholds given to this script should be in the format specified at 
<http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT>.

This module is built upon L<Nagios::Plugin> by the Nagios Plugin Development
Team.  Further reading on Nagios, NPRE, and Nagios Plugins is available at
<http://nagios.com/>.

=head1 AUTHOR

This script is written and maintained by Dann Stayskal <dann@stayskal.com>
and is available on his website, at
<http://dann.stayskal.com/software/check_frebsd/>.

=head1 LICENSE

Copyright (C) 2009 by Dann Stayskal.

This program is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation; either version 2 of the License, or (at your option) any later 
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
Place, Suite 330, Boston, MA 02111-1307 USA

Nagios, the Nagios logo, and Nagios graphics are the servicemarks, trademarks, 
or registered trademarks owned by Nagios Enterprises. All other servicemarks 
and trademarks are the property of their respective owner.

=cut
